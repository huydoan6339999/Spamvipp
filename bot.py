from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import logging, random
from keep_alive import keep_alive

BOT_TOKEN = "6320148381:AAH-_OKdwtZNKky9NXEx0zoWezcuEIoSEo8"

rules_dict = {
    3: "X·ªâu", 4: "68% X·ªâu", 5: "X·ªâu", 6: "Ngh·ªâ",
    7: {"exact": ["124", "223", "133"], "result": "X·ªâu", "default": "T√†i"},
    8: {"exact": ["134"], "result": "X·ªâu", "default": "T√†i"},
    9: {"exact": ["234"], "result": "X·ªâu", "default": "T√†i (50/50)"},
    10: "X·ªâu (auto)", 11: "Ngh·ªâ",
    12: {"exact": ["246", "156", "336", "255"], "result": "X·ªâu", "default": "T√†i"},
    13: {"exact": ["553", "661", "531", "631"], "result": "X·ªâu", "default": "T√†i"},
    14: "50/50", 15: "T√†i", 16: "X·ªâu", 17: "C·∫©n th·∫≠n", 18: "T√†i"
}

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé≤ Bot SunWin D·ª± ƒêo√°n T√†i X·ªâu\n"
        "üëâ /login <username> <password>\n"
        "üëâ /predict <phi√™n1> <phi√™n2>..."
    )

async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 2:
        await update.message.reply_text("‚ö†Ô∏è D√πng: /login <username> <password>")
        return
    username, password = context.args
    if username == "baohuy1109" and password == "036320":
        await update.message.reply_text("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
    else:
        await update.message.reply_text("‚ùå Sai t√†i kho·∫£n!")

async def predict(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        session_numbers = [int(num) for num in context.args]
    except:
        await update.message.reply_text("‚ö†Ô∏è Sai c√∫ ph√°p. V√≠ d·ª•: /predict 3 4 5")
        return
    result = predict_outcome(session_numbers)
    await update.message.reply_text(f"üîÆ D·ª± ƒëo√°n: {result}")

def predict_outcome(session_numbers):
    last = session_numbers[-1]
    rule = rules_dict.get(last)
    if isinstance(rule, str):
        if "X·ªâu" in rule:
            return "X·ªâu ‚úÖ"
        elif "T√†i" in rule:
            return "T√†i ‚úÖ"
        elif "50/50" in rule:
            return random.choice(["T√†i", "X·ªâu"])
        else:
            return "‚ö†Ô∏è N√™n ngh·ªâ tay"
    elif isinstance(rule, dict):
        seq = "".join(str(x) for x in session_numbers[-3:])
        return rule["result"] if seq in rule["exact"] else rule["default"]
    return random.choice(["T√†i", "X·ªâu"]) + " (random)"

def main():
    keep_alive()
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("login", login))
    app.add_handler(CommandHandler("predict", predict))
    print("ü§ñ Bot ƒë√£ s·∫µn s√†ng!")
    app.run_polling()

if __name__ == "__main__":
    main()
